set omnifunc=syntaxcomplete#Complete
" General
set number                      " Show line numbers
set linebreak                   " Break lines at word (requires Wrap lines)
set showbreak=+++               " Wrap-broken line prefix
set textwidth=100               " Line wrap (number of cols)
set showmatch                   " Highlight matching brace
set visualbell                  " Use visual bell (no beeping)

set hlsearch                    " Highlight all search results
set smartcase                   " Enable smart-case search
set ignorecase                  " Always case-insensitive
set incsearch                   " Searches for strings incrementally

set autoindent                  " Auto-indent new lines
set expandtab                   " Use spaces instead of tabs
set shiftwidth=2                " Number of auto-indent spaces
set smartindent                 " Enable smart-indent
set smarttab                    " Enable smart-tabs
set softtabstop=2               " Number of spaces per Tab
set tabstop=2

set autoread                    " Auto read when a file is changed
set lazyredraw                  " Don't redraw while executing macros
set ruler                       " Show row and column ruler information
set undolevels=1000             " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set guifont=Inconsolata:h14

syntax enable                   " Enable syntax highlighting

" Folding
set foldenable                  " Enable folding
set foldlevelstart=10           " Open most folds by default
set foldnestmax=10              " 10 nested fold max
nnoremap <space> za             " Space open/closes folds
set foldmethod=indent           " Fold based on indent level

" Set colors
colorscheme desert
set background=dark

" No annoying sound on errors
set noerrorbells
set novisualbell

" Mappings
:let mapleader = "-"
" 'quote' a word
nnoremap qw :silent! normal mpea'<Esc>bi'<Esc>`pl
" double "quote" a word
nnoremap qd :silent! normal mpea"<Esc>bi"<Esc>`pl
" remove quotes from a word
nnoremap wq :silent! normal mpeld bhd `ph<CR>
" tabs
nnoremap th  :tabfirst<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<CR>
nnoremap tp  :tabprev<CR>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . (tabpagenr()+1)<CR>

" Pathogen
runtime macros/matchit.vim

if has("autocmd")
  filetype indent on
endif

" call pathogen#infect()
" call pathogen#helptags()

filetype plugin indent on

runtime macros/matchit.vim

" Advanced
" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

" Highlight unwanted whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

autocmd BufWritePre *.ztf %s/\s\+$//e
autocmd BufWritePre *.zaf %s/\s\+$//e
autocmd BufWritePre *.zf %s/\s\+$//e
autocmd BufWritePre *zorstub %s/\s\+$//e

set tw=0

" Diff changes
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

nnoremap gd :w !diff % -<CR>

augroup filetypedetect
    au BufRead,BufNewFile *zorstub set filetype=yaml
    au BufRead,BufNewFile *.md set filetype=text
augroup END

""" PLUGIN-SPECIFIC OPTIONS
" These are "supposed to be" set in after/plugin directory, but then
" cross-platform synchronization would get even messier. So, au VimEnter it is. 

function! SetPluginOptionsNow()

    " airline/powerline
    if exists(":AirlineRefresh")
        set laststatus=2
        let g:airline_powerline_fonts = 1
        set guifont=Inconsolata\ for\ Powerline:h15
        let g:Powerline_symbols = 'fancy'
        set t_Co=256
        set fillchars+=stl:\ ,stlnc:\
        set term=xterm-256color
        set termencoding=utf-8
        set showtabline=0
        let g:airline#extensions#bufferline#enabled = 0
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#tab_nr_type = 1
        let g:bufferline_echo = 0

        function! WindowNumber(...)
          let builder = a:1
          let context = a:2
          call builder.add_section('airline_b', '%{tabpagewinnr(tabpagenr())}')
          return 0
        endfunction

        call airline#add_statusline_func('WindowNumber')
        call airline#add_inactive_statusline_func('WindowNumber')
    endif

    " NERDTree Options
    if exists(":NERDTree")
        map <F10> :NERDTreeToggle<CR>
    endif

    " Syntastic Options
    if exists(":SyntasticCheck")
      set statusline+=%#warningmsg#
      set statusline+=%{SyntasticStatuslineFlag()}
      set statusline+=%*
      let g:syntastic_always_populate_loc_list = 1
      let g:syntastic_auto_loc_list = 1
      let g:syntastic_check_on_open = 1
      let g:syntastic_check_on_wq = 0

      set omnifunc=syntaxcomplete#Complete

      map <C-n> :cnext<CR>
      map <C-m> :cprevious<CR>
      nnoremap <leader>a :cclose<CR>
      set pastetoggle=<F6>
    endif

    " Go config
    if exists(":GoPath")
      let g:go_fmt_command = "goimports"
      let g:go_list_type = "quickfix"
      let g:go_metalinter_autosave = 1
      let g:go_metalinter_enabled = ['golint', 'errcheck']
      let g:go_metalinter_autosave_enabled = ['golint', 'errcheck']
      autocmd FileType go nmap <leader>r <Plug>(go-run)
      autocmd FileType go nmap <leader>t <Plug>(go-test)
      autocmd FileType go nmap <leader>i <Plug>(go-imports)
      autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
      " run :GoBuild or :GoTestCompile based on the go file
      function! s:build_go_files()
        let l:file = expand('%')
        if l:file =~# '^\f\+_test\.go$'
          call go#test#Test(0, 1)
        elseif l:file =~# '^\f\+\.go$'
          call go#cmd#Build(0)
        endif
      endfunction

      autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
    endif

endfunction

au VimEnter * call SetPluginOptionsNow()
